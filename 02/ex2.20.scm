#lang scheme
(define (filter l ff)
    (cond ((empty? l) l)
          ((ff (car l)) (cons (car l) (filter (cdr l) ff)))
          (else (filter (cdr l) ff))
          )
    )
(define (same-parity l)
  (let ((first (car l)))
    (filter x (lambda (x) (= (remainder x 2) (remainder first 2))))
    )
  )
(define x (list 1 3 5 6 7))
(same-parity x)
